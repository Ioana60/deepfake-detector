!pip install -q tensorflow opencv-python matplotlib scikit-learn

import os
import zipfile
import numpy as np
import cv2
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import glob
from google.colab import files

uploaded = files.upload()
zip_path = next(iter(uploaded))

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall('/content/deepfake_data')
    zip_ref.printdir()
real_folder = glob.glob('/content/deepfake_data/**/real', recursive=True)[0]
fake_folder = glob.glob('/content/deepfake_data/**/fake', recursive=True)[0]

print(" Real images found in:", real_folder)
print(" Fake images found in:", fake_folder)
def load_images_from_folder(folder, label, img_size=(224, 224)):
    data = []
    for filename in os.listdir(folder):
        filepath = os.path.join(folder, filename)
        img = cv2.imread(filepath)
        if img is not None:
            img = cv2.resize(img, img_size)
            data.append((img, label))
    return data

real_data = load_images_from_folder(real_folder, 0)
fake_data = load_images_from_folder(fake_folder, 1)

data = real_data + fake_data
np.random.shuffle(data)

X = np.array([img for img, label in data]) / 255.0
y = np.array([label for img, label in data])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

ef load_images_from_folder(folder, label, img_size=(224, 224)):
    data = []
    for filename in os.listdir(folder):
        filepath = os.path.join(folder, filename)
        img = cv2.imread(filepath)
        if img is not None:
            img = cv2.resize(img, img_size)
            data.append((img, label))
    return data

real_data = load_images_from_folder(real_folder, 0)
fake_data = load_images_from_folder(fake_folder, 1)

data = real_data + fake_data
np.random.shuffle(data)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

X = np.array([img for img, label in data]) / 255.0
y = np.array([label for img, label in data])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

data = real_data + fake_data
np.random.shuffle(data)
X = np.array([img for img, label in data]) / 255.0
y = np.array([label for img, label in data])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5)

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns
import matplotlib.pyplot as plt

y_pred = (model.predict(X_test) > 0.5).astype("int32")

acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Evaluation Metrics:")
print(f"Accuracy : {acc:.2%}")
print(f"Precision: {prec:.2%}")
print(f"Recall   : {rec:.2%}")
print(f"F1 Score : {f1:.2%}")

print("\n🔍 Classification Report:")
print(classification_report(y_test, y_pred, target_names=["Real", "Fake"]))

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Predicted Real", "Predicted Fake"], yticklabels=["Actual Real", "Actual Fake"])
plt.title("🧠 Confusion Matrix")
plt.xlabel("Prediction")
plt.ylabel("Actual")
plt.show()

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.utils import class_weight

model = tf.keras.models.Sequential([
    tf.keras.Input(shape=(224, 224, 3)),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

datagen = ImageDataGenerator(
    rotation_range=15,
    zoom_range=0.1,
    horizontal_flip=True
)
datagen.fit(X_train)

class_weights_array = class_weight.compute_class_weight(
    class_weight='balanced',
    classes=np.unique(y_train),
    y=y_train
)
cw = {i: class_weights_array[i] for i in range(len(class_weights_array))}

history = model.fit(
    datagen.flow(X_train, y_train, batch_size=32),
    epochs=15,
    validation_data=(X_test, y_test),
    class_weight=cw
)


# STEP 12: Evaluate model
y_pred = (model.predict(X_test) > 0.5).astype("int32")

acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("📊 Evaluation Metrics:")
print(f"✅ Accuracy : {acc:.2%}")
print(f"📌 Precision: {prec:.2%}")
print(f"📌 Recall   : {rec:.2%}")
print(f"📌 F1 Score : {f1:.2%}")

print("\n🔍 Classification Report:")
print(classification_report(y_test, y_pred, target_names=["Real", "Fake"]))

# STEP 13: Confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Predicted Real", "Predicted Fake"],
            yticklabels=["Actual Real", "Actual Fake"])
plt.title("🧠 Confusion Matrix")
plt.xlabel("Prediction")
plt.ylabel("Actual")
plt.show()
